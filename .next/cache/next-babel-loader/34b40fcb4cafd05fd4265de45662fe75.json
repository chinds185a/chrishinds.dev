{"ast":null,"code":"import _regeneratorRuntime from \"/Users/chinds/workspace/chrishinds.dev/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/chinds/workspace/chrishinds.dev/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport matter from \"gray-matter\";\nimport marked from \"marked\";\nimport yaml from \"js-yaml\";\n\nvar getAllPosts = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var context, posts, _iterator, _step, key, post, content, meta;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            context = require.context(\"../_posts\", false, /\\.md$/);\n            posts = [];\n            _iterator = _createForOfIteratorHelper(context.keys());\n            _context.prev = 3;\n\n            _iterator.s();\n\n          case 5:\n            if ((_step = _iterator.n()).done) {\n              _context.next = 15;\n              break;\n            }\n\n            key = _step.value;\n            post = key.slice(2);\n            _context.next = 10;\n            return import(\"../_posts/\".concat(post));\n\n          case 10:\n            content = _context.sent;\n            meta = matter(content[\"default\"]);\n            posts.push({\n              slug: post.replace(\".md\", \"\"),\n              title: meta.data.title\n            });\n\n          case 13:\n            _context.next = 5;\n            break;\n\n          case 15:\n            _context.next = 20;\n            break;\n\n          case 17:\n            _context.prev = 17;\n            _context.t0 = _context[\"catch\"](3);\n\n            _iterator.e(_context.t0);\n\n          case 20:\n            _context.prev = 20;\n\n            _iterator.f();\n\n            return _context.finish(20);\n\n          case 23:\n            return _context.abrupt(\"return\", posts);\n\n          case 24:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[3, 17, 20, 23]]);\n  }));\n\n  return function getAllPosts() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar getPostBySlug = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(slug) {\n    var fileContent, meta, content;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return import(\"../_posts/\".concat(slug, \".md\"));\n\n          case 2:\n            fileContent = _context2.sent;\n            meta = matter(fileContent[\"default\"]);\n            content = marked(meta.content);\n            return _context2.abrupt(\"return\", {\n              title: meta.data.title,\n              content: content\n            });\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getPostBySlug(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar getConfig = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var config;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return import(\"../config.yml\");\n\n          case 2:\n            config = _context3.sent;\n            return _context3.abrupt(\"return\", yaml.safeLoad(config[\"default\"]));\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function getConfig() {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport { getAllPosts, getPostBySlug, getConfig };","map":{"version":3,"sources":["/Users/chinds/workspace/chrishinds.dev/api/index.js"],"names":["matter","marked","yaml","getAllPosts","context","require","posts","keys","key","post","slice","content","meta","push","slug","replace","title","data","getPostBySlug","fileContent","getConfig","config","safeLoad"],"mappings":";;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,SAAjB;;AAEA,IAAMC,WAAW;AAAA,sEAAG;AAAA;;AAAA;AAAA;AAAA;AAAA;AACZC,YAAAA,OADY,GACFC,OAAO,CAACD,OAAR,CAAgB,WAAhB,EAA6B,KAA7B,EAAoC,OAApC,CADE;AAEZE,YAAAA,KAFY,GAEJ,EAFI;AAAA,mDAIAF,OAAO,CAACG,IAAR,EAJA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIPC,YAAAA,GAJO;AAKVC,YAAAA,IALU,GAKHD,GAAG,CAACE,KAAJ,CAAU,CAAV,CALG;AAAA;AAAA,mBAMM,2BAAoBD,IAApB,EANN;;AAAA;AAMVE,YAAAA,OANU;AAOVC,YAAAA,IAPU,GAOHZ,MAAM,CAACW,OAAO,WAAR,CAPH;AAShBL,YAAAA,KAAK,CAACO,IAAN,CAAW;AACTC,cAAAA,IAAI,EAAEL,IAAI,CAACM,OAAL,CAAa,KAAb,EAAoB,EAApB,CADG;AAETC,cAAAA,KAAK,EAAEJ,IAAI,CAACK,IAAL,CAAUD;AAFR,aAAX;;AATgB;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA,6CAeXV,KAfW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXH,WAAW;AAAA;AAAA;AAAA,GAAjB;;AAkBA,IAAMe,aAAa;AAAA,uEAAG,kBAAOJ,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACM,2BAAoBA,IAApB,SADN;;AAAA;AACdK,YAAAA,WADc;AAEdP,YAAAA,IAFc,GAEPZ,MAAM,CAACmB,WAAW,WAAZ,CAFC;AAGdR,YAAAA,OAHc,GAGJV,MAAM,CAACW,IAAI,CAACD,OAAN,CAHF;AAAA,8CAKb;AACLK,cAAAA,KAAK,EAAEJ,IAAI,CAACK,IAAL,CAAUD,KADZ;AAELL,cAAAA,OAAO,EAAEA;AAFJ,aALa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbO,aAAa;AAAA;AAAA;AAAA,GAAnB;;AAWA,IAAME,SAAS;AAAA,uEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACK,OAAO,eAAP,CADL;;AAAA;AACVC,YAAAA,MADU;AAAA,8CAGTnB,IAAI,CAACoB,QAAL,CAAcD,MAAM,WAApB,CAHS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATD,SAAS;AAAA;AAAA;AAAA,GAAf;;AAMA,SAASjB,WAAT,EAAsBe,aAAtB,EAAqCE,SAArC","sourcesContent":["import matter from \"gray-matter\";\nimport marked from \"marked\";\nimport yaml from \"js-yaml\";\n\nconst getAllPosts = async () => {\n  const context = require.context(\"../_posts\", false, /\\.md$/);\n  const posts = [];\n\n  for (const key of context.keys()) {\n    const post = key.slice(2);\n    const content = await import(`../_posts/${post}`);\n    const meta = matter(content.default);\n\n    posts.push({\n      slug: post.replace(\".md\", \"\"),\n      title: meta.data.title,\n    });\n  }\n\n  return posts;\n};\n\nconst getPostBySlug = async (slug) => {\n  const fileContent = await import(`../_posts/${slug}.md`);\n  const meta = matter(fileContent.default);\n  const content = marked(meta.content);\n\n  return {\n    title: meta.data.title,\n    content: content,\n  };\n};\n\nconst getConfig = async () => {\n  const config = await import(\"../config.yml\");\n\n  return yaml.safeLoad(config.default);\n};\n\nexport { getAllPosts, getPostBySlug, getConfig };\n"]},"metadata":{},"sourceType":"module"}